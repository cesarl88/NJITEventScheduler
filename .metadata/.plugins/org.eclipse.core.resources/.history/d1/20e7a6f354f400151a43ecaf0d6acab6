<?php

class Database{
	
	private $host      = "sql2.njit.edu";
	private $user      = "cls33";
	private $pass      = "J2nf0VWWc";
	private $dbname    = "cls33";
	private $dbtype    = "mysql";
	
	private $db_handler;
	public $error;
	private $statement;
	
	public function  __construct()
	{
		//set DSN
		$dsn = $this->dbtype.':host=' .$this->host. ';dbname='.$this->dbname;
		
		echo "<script>console.log( 'Debug: ".$dsn."' );</script>";
		
		//set options
		
		$options = array(
				PDO::ATTR_PERSISTENT => true,
				PDO::ATTR_ERRMODE    => PDO::ERRMODE_EXCEPTION
		);
		
		//Create New PDO Instance
		
		try{
			$this->db_handler = new PDO($dsn, $this->user, $this->pass, $options);
		}
		catch(PDOException $e){
			echo "<script>console.log( 'DebugError : ".$e->getMessage()."' );</script>";
				
			$this->error = $e->getMessage();	
				
		}
		
	}
	

	/*
	 * Prepares and return statement
	 */
	public function prepare($query)
	{
		echo "<script>console.log( 'Debug: Prepare statement' );</script>";
		
		$this->statement = $this->db_handler->prepare($query);
	}
	
	/**
	 * Binds the values of the parameteres in the statement
	 */
	public function bind($param, $value, $type = null)
	{
		if(is_null($type)){
			switch(true)
			{
				case is_int($value):
					$type = PDO::PARAM_INT;
					break;
				case is_bool($value):
					$type = PDO::PARAM_BOOL;
					break;
				case is_null($value):
					$type = PDO::PARAM_NULL;
					break;
				default:
					$type = PDO::PARAM_STR;
					break;
			}
		}
		
		$this->statement->bindValue($param, $value, $type);
	}
	
	/**
	 * Execute the statement
	 */
	public function execute()
	{
		$this->statement->execute();
	}
	
	public function select($table, $where = '',$fields = '', $order = '', $limit = null, $offset = '')
	{
		$query = "SELECT $fields FROM $table "
				.($where ? " WHERE $where " : '')
				.($limit ? " LIMIT $limit " : '')
				.(($offset & $limit ? " OFFSET $offset " : ''))
				. ($order ? " ORDER BY $order" : '');

		$this->prepare($query);
	}
	
	/**
	 * Insert data
	 */
	
	public function insert($table, $data)
	{
		echo "<script>console.log( 'Debug:Inside insert' );</script>";
		
		
		ksort($data);	
		
		$fieldNames = implode(',', array_keys($data));
		$fieldValues = ':'.implode(', :', array_keys($data));
		
		$query = "INSERT INTO $table ($fieldNames) VALUES($fieldValues)";
		
		echo "<script>console.log( 'Debug: ".$query."' );</script>";
		
		$this->prepare($query);
		
		echo "<script>console.log( 'Debug: About binding' );</script>";
		
		foreach($data as $key => $value)
		{
			echo "<script>console.log( 'Debug: ".$value."' );</script>";
				
			$this->bind(":$key",$value);
		}
		
		$this->execute();
	}
	
	/**
	 * Update data
	 */
	
	public function Update($table, array $data, $where = '')
	{
		ksort($data);
		
		foreach($data as $key => $value)
		{
			$fieldDetails .= "$key = :$key";
		}
		
		$fieldDetails = rtrim($fieldDetails,',');
		
		$query = "UPDATE$table SET $fieldDetails ".($where ? 'WHERE '.$where : '' );
	
		$this->prepare($query);
	
		foreach($data as $key => $value)
		{
			$tis->bind(":$key",$value);
		}
	
		$this->execute();
	}
	
	
	/**
	 * DElete data
	 */
	
	public function delete($table, $where, $limit = 1)
	{
		$this->prepare("DELETE FROM $table WHERE $where LIMIT $limit");
		$this->execute();
	}
	
	/**
	 * Return resultset as asociative array
	 */
	public function resultSet()
	{
		$this->execute();
		return $this->statement->fetchAll(PDO::FETCH_ASSOC);
	}
	
	/**
	 * Return Single associiative array
	 */
	public function single()
	{
		$this->execute();
		return $this->statement->fetch(PDO::FETCH_ASSOC);
	}
	
	/**
	 * Return Object Set
	 */
	public function ObjectSet($entityClass)
	{
		$this->execute();
		$this->statement->setFetchMode(PDO::FETCH_CLASS,$entityClass);
		return $this->statement->fetchAll();
	}
	
	/**
	 * Return Single Object
	 */
	public function singleObject($entityClass)
	{
		$this->execute();
		$this->statement->setFetchMode(PDO::FETCH_CLASS,$entityClass);
		return $this->statement->fetch();
	}
	
	public function rowCount()
	{
		return $this->statement->rowCount();
	}
	
	public function lastInsertId()
	{
		return $this->db_handler->lastInsertId();
	}
	
	public function beginTransaction()
	{
		return $this->db_handler->beginTransaction();
	}
	
	public function endTransaction()
	{
		return $this->db_handler->commit();
	}
	
	public function cancelTranscation()
	{
		return $this->db_handler->rollBack();
	}
	
	public function debugDumpParams()
	{
		return $this->statement->debugDumpParams();
	}
}

/**
 * Data mapping Layer
 */
class DBContext{
	
	private $db;
	private $entities = array();
	
	public function __construct() {
		$this->db = new Database();
	}
	
	public function find($entity, $conditions = array(), $fields = '*', $order = '', $limit = null, $offset = ''){
		
		$where = '';
		foreach($conditions as $key => $value)
		{
			if(is_string($value))
			{
				$where .= ' '.$key.' = "'.$value.'"'." &&"; 
			}
			else{
				$where .= ' '.$key.' = '.$value." &&";
			}
		}
		
		$where = rtrim($where, '&');
		$this->db->select($entity->entity_table,$where,$fields,$order,$limit,$offset);
		return $this->db->singleObject($entity->entity_class);
		
	}
	
	public function findAll($entity, $conditions = array(), $fields = '*', $order = '', $limit = null, $offset = ''){
	
		$where = '';
		foreach($conditions as $key => $value)
		{
			if(is_string($value))
			{
				$where .= ' '.$key.' = "'.$value.'"'." &&";
			}
			else{
				$where .= ' '.$key.' = '.$value." &&";
			}
		}
	
		$where = rtrim($where, '&');
		$this->db->select($entity->entity_table,$where,$fields,$order,$limit,$offset);
		return $this->db->singleObject($entity->entity_class);
	}
	
	public function saveChanges()
	{
	#	echo "<script>console.log( 'Debug: saveChanges' );</script>";
		
		foreach($this->entities as $entity)
		{
			#echo "<script>console.log( 'Debug: ".$entity->entity_state."' );</script>";
				
			switch($entity->entity_state){
				
				case EntityState::Created:
					
					foreach ($entity->db_fields as $key)
					{
						echo "<script>console.log( 'Debug: ".$entity->$key."' );</script>";
						
						$data[$key] = $entity->$key;
					}
					echo "<script>console.log( 'Debug: Inserting' );</script>";
						
					$this->db->insert($entity->entity_table, $data);
					break;
					
				case EntityState::Modified:
					
					foreach($entity->db_fields as $key)
					{
						if(!is_null($entity->$key)){
							$data[$key] = $entity->$key;
						}
					}
					
					$where = ' ';
					
					foreach($entity->primary_keys as $key)
					{
						$where .=' '.$key. " = ".$entity->$key. " &&";
					}
					$where = rtrim($where,'&');
					$this -> db->Update($entity->entity_table, $data, $where);
					break;
					
				case EntityState::Deleted:
					
					$where = ' ';
					foreach($entity->primary_key as $key)
					{
						$where .=' '.$key." = ".$entity->$key." &&";
					}
					
					$where = rtrim($where, ' &');
					$this->db->delete($entity->entity_table, $where);
					break;
				default:
					break;
			}
		}
		unset($this->entities);
	}
	
	public function add($entity)
	{
		
		$entity->entity_state = EntityState::Created;
		echo "<script>console.log( 'Debug: Adding-> EntityState = ".$entity->entity_state."' );</script>";
		array_push($this->entities,$entity);
	}
	
	public function update($entity)
	{
		$entity->entity_state = EntityState::Modified;
		array_push($this->entities,$entity);
	}
	
	public function remove($entity)
	{
		$entity->entity_state = EntityState::Deleted;
		array_push($this->entities,$entity);
	}
	
}

final class EntityState{
	
	const Created = 1;
	const Modified = 2;
	const Deleted = 3;
}

class Entity
{
	private $db;
	
	public function __construct(){
		
		$this->db = new Database();
	}
	
	public function add()
	{
		foreach ($this->db_fields as $key){
			$data[$key] = $this->$key;
		}
		
		$this->db->insert($this->entitry_class, $data);
	}
	
	public function update()
	{
		foreach($this->db_fields as $key){
			if(!is_null($this->$key)){
				$data[$key] = $this->$key;
			}
		}
		
		$where = ' ';
		
		foreach($this->primary_keys as $key)
		{
			$where .=' '.$key." = ".$this->$key." &&";
		}
		
		$where = rtrim($where,'&');
		$this->db->Update($this->entity_table, $data, $where);
	}
	
	public function remove()
	{
		$where = ' ';
		
		foreach ($this->primary_keys as $key){
			$where = ' '.$key." = ".$this->$key. " &&";
		}
		
		$where = rtrim($where,'&');
		$this->db->delete($this->entity_table, $where);
	}
	
}

class User extends Entity{

	public $UserID;
	public $UserName;
	public $Password;
	public $Role;
	
	public $entity_table = 'User';
	public $entity_class = 'User';
	public $db_fields = array('Password','Role','UserID','UserName');
	public $primary_keys = array('UserID');
	
	public function info()
	{
		return $this->UserName;
	}
}


echo "Testing Entity ";

$db = new DBContext();
/*$user = new User();
$user->UserName ='cesarl_88';
$user->Password = "cesarpassword";
$user->Role = 2;
$user->UserID = 0;
echo $user->info();

$db->add($user);

$db->saveChanges();*/

$user = $db->find(new User(),array('ID'=> 1));
echo $user->UserName;
echo 'user Saved';

?>